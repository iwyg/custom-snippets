snippet unittest "PHPUnit unit test" b
<?php

/**
 * This File is part of the ${1:`!v PhpNamespaceGet()`} package
 *
 * (c) ${2:`git config user.name`} <${3:`git config user.email`}> 
 *
 * ${4:For full copyright and license information, please refer to the LICENSE file
 * that was distributed with this package.}
 */

namespace ${5:`!v PhpNamespaceGet()`};

class ${1:`!p snip.rv=snip.fn.split('.')[0]`} extends \PHPUnit_Framework_TestCase
{
	$0
}
endsnippet

snippet testcase "PHPUnit_Framework_TestCase" b

class ${1:`!p snip.rv=snip.fn.split('.')[0]`} extends \PHPUnit_Framework_TestCase
{
	$0
}
endsnippet

snippet mockb "get Mockbuilder"
$this->getMockbuilder('${1:ClassName}')${2:->disableOriginalConstructor()}->getMock()${3};
endsnippet

snippet mock "get Mock"
$this->getMock('${1:ClassName}')${2};
endsnippet

snippet test "test case"
/**
 * @test
 * ${1:@dataProvider} ${2}
 */
public function ${3:TestCase}(${4})
{
	$0
}
endsnippet

snippet ttest "test case"
/**
 * @test
 * ${1:@dataProvider} ${2}
 */
public function test${3:TestCase}(${4})
{
	$0
}
endsnippet

snippet @test
/** @test */
public function it${1:IsExpectedThat}()
{
	$0
}
endsnippet

snippet isinst
/** @test */
public function itShouldBeInstantiable()
{
	$0
}
endsnippet

snippet testwd "test with data"

/**
 * @test
 * @dataProvider $3
 */
public function test${1:TestCase}($${2:arguments})
{
	$0
}

public function ${3:dataProvider}() 
{
	return [
	];
}
endsnippet

snippet assinst
$this->assertInstanceof('$1', $0);
endsnippet

snippet asseq
$this->assertEquals($1, $0);
endsnippet

snippet asssm
$this->assertSame($1, $0);
endsnippet

snippet assnull
$this->assertNull($1);
endsnippet

snippet ass0
$this->assertNull($1);
endsnippet

snippet assfalse
$this->assertFalse($1);
endsnippet

snippet asstrue
$this->assertFalse($1);
endsnippet
